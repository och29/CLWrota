# csv_api_client

version 0.0.3 : 20 June 2022

This is an example API client to extract rota data from one or more instances
of Rotamap's Public API service and export it to a CSV file.

To use the client, first make a copy of `settings.example.json` called
`settings.json`. If the file is copied to a directory other than that of the
project, the `-s` argument described below can be used to point the client to
it.

The content of the settings file needs to be updated to determine the:
- Public API instances to be accessed
- date range of the data required
- processing that should be applied to the data

A `tokens.json` file is also referenced below, however that is automatically
generated by the client so does not need to be manually created.

The client can be run with the following additional arguments:
- `-v` verbose: This displays the client's progress.
- `-i` iso dates: This will provide output date formats in international date format.
- `-c` csv output: The path to the directory where the output CSV file will be created. If
ommited the output will be written to stdout.
- `-t` tokens: The path to the directory where the tokens.json file will be stored. If omitted
  the project root directory will be used.
- `-s` settings: The path to the directory containing the settings.json file. If
  omitted the project root directory will be used.

For instance, the script can be run to provide a CSV file to the client's
directory, using `settings.json` and `tokens.json` files also stored there, via:

`python3 csv_api_client.py -c ./`

The client relies on the `requests` Python library:
https://pypi.org/project/requests/ which can be installed via `pip install
requests`.

## Authentication

Example authentication to access two instances of the Public API would be:

    "departments": [
        {
            "shortname": "department_a",
            "system": "clwrota",
            "auth": {
                "username": "username",
                "password": "password"
            }
        },
        {
            "shortname": "department_b",
            "system": "medirota",
            "auth": {
                "username": "username",
                "password": "password"
            }
        }
    ],

- The `shortname` for a department would be the prefix of the department's rota
  URL.
- `system` must be either `clwrota` or `medirota`.
- `username` and `password` are secret API credentials provided by the
  department.

Upon the initial running of the client, a `tokens.json` file will be created.
This file will be created in whatever file path described in the `-t` argument,
or if that is not provided, the project root directory. This file contains the
authentication tokens for each Public API instance being accessed.

## Date range

The `day_range` attribute determines the number of days of data that should be
returned. For instance, if `2` is chosen, data will be provided for today and
tomorrow.

## Processing

Some forms of processing are currently possible to define by updating the
settings file.

### Additional fields

`additional_fields` : The keys and values of this object represent additional
columns to be added to the output data set that will have a constant value.
They key represents the field name and the value represents the value of
that attribute for each row of data. Note that an item with a matching key must
also be added to `return_data_set`.

### Required fields

`required_fields` : Only include rows that have data for all of the listed
fields. If no required fields are listed then all data will be returned.

For instance, if the `required_fields` object was amended as follows:

    "required_fields": [
        "gmc_number",
        "location_external_code"
    ],

it would only include rows of data that have data for both the `gmc_number`
field and the `location_external_code` field.

### Output data format

`return_data_set` : The keys and values of this object represent what columns
are included, what their names are, and what their order is, within the
output CSV file.

For instance, if the `return_data_set` object was amended as follows:

    "return_data_set": {
        "person": "NAME",
        "modified": "MODIFIED",
        "date": "DATE",
        "start_time": "START",
        "end_time": "END"
    },

it would produce a CSV file with the columns:

`NAME | MODIFIED | DATE | START | END`
